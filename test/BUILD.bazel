# Copyright 2025 rules_cc_module authors
# Licensed under the Apache License, Version 2.0

# This test directory contains examples demonstrating various features of the cc_module rules:
#
# 1. Basic module usage (math_module, calculator)
# 2. Template specialization scenarios (scenarios_lib, scenarios_test)  
# 3. Parallel compilation with explicit dependencies (parallel_test_*)
#
# The parallel compilation examples show how to use module_dependencies to:
# - Declare explicit dependencies between modules
# - Enable parallel compilation of independent modules
# - Support both module names and file names as dependency keys

load("//cc_module:defs.bzl", "cc_module_library", "cc_module_binary")

# Example module library
cc_module_library(
    name = "math_module",
    module_interfaces = ["math_module.ixx"],
    srcs = [
        "math_impl.cpp",
    ],
    copts = [
        "/std:c++latest",
    ],
    hdrs = ["math_common.h"],
    features = ["cpp_modules"],
)

# Example binary using the module
cc_module_binary(
    name = "calculator",
    srcs = ["main.cpp"],
    deps = [":math_module"],
    copts = [
        "/std:c++latest",
    ],
    linkstatic = True,
    features = ["cpp_modules"],
)


# Scenarios for template specialization visibility
cc_module_library(
    name = "scenarios_lib",
    module_interfaces = ["scenarios.ixx"],
    hdrs = ["scenarios_impl.h"],
    copts = [
        "/std:c++latest",
    ],
    features = ["cpp_modules"],
)

cc_module_binary(
    name = "scenarios_test",
    srcs = ["scenarios_main.cpp"],
    deps = [":scenarios_lib"],
    copts = [
        "/std:c++latest",
    ],
    features = ["cpp_modules"],
    linkstatic = True,
)

# Test with explicit module dependencies for parallel compilation
cc_module_library(
    name = "parallel_test_lib",
    module_interfaces = [
        "test_base1.ixx",     # No dependencies
        "test_base2.ixx",     # No dependencies  
        "test_derived.ixx",   # Depends on test_base1 and test_base2
        "test_main.ixx",      # Depends on test_derived
    ],
    module_dependencies = {
        # Using module names
        "test_derived": ["test_base1", "test_base2"],
        "test_main": ["test_derived"],
        # test_base1 and test_base2 are not listed, so they have no dependencies
    },
    copts = [
        "/std:c++latest",
    ],
    features = ["cpp_modules"],
)

cc_module_binary(
    name = "parallel_test",
    srcs = ["parallel_test_main.cpp"],
    deps = [":parallel_test_lib"],
    copts = [
        "/std:c++latest",
    ],
    features = ["cpp_modules"],
    linkstatic = True,
)

# Test with file name based dependencies 
cc_module_library(
    name = "parallel_test_lib_filename",
    module_interfaces = [
        "test_base1.ixx",     
        "test_base2.ixx",     
        "test_derived.ixx",   
        "test_main.ixx",      
    ],
    module_dependencies = {
        # Using file names instead of module names
        "test_derived.ixx": ["test_base1.ixx", "test_base2.ixx"],
        "test_main.ixx": ["test_derived.ixx"],
    },
    copts = [
        "/std:c++latest",
    ],
    features = ["cpp_modules"],
)

cc_module_binary(
    name = "parallel_test_filename", 
    srcs = ["parallel_test_main.cpp"],
    deps = [":parallel_test_lib_filename"],
    copts = [
        "/std:c++latest",
    ],
    features = ["cpp_modules"],
    linkstatic = True,
)

# Test with mixed module and file dependencies
cc_module_library(
    name = "parallel_test_lib_mixed",
    module_interfaces = [
        "test_base1.ixx",     
        "test_base2.ixx",     
        "test_derived.ixx",   
        "test_main.ixx",      
    ],
    module_dependencies = {
        # Mixed usage: some file names, some module names
        "test_derived": ["test_base1.ixx", "test_base2"],  # Mixed
        "test_main.ixx": ["test_derived"],                 # File depends on module
    },
    copts = [
        "/std:c++latest",
    ],
    features = ["cpp_modules"],
)
